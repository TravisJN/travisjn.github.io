<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>TravLearnsJS</title><description>TravLearnsJS</description><link>http://localhost:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Tue, 05 May 2015 17:39:06 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Creating a view in React Native</title><description>&lt;p&gt;React Native is a great tool with potentially far-reaching implications on how the future of mobile development will play out.  The ability to create native iOS and Android apps in JavaScript breaks down what otherwise would be a high barrier of entry into an increasingly popular medium for applications.  Unfortunately however, it's not as easy as creating a web page with JavaScript and clicking a big red "React Native" button that automagically starts running anything on an iPhone.  It's still much easier than learning a new language and in this post I'll describe one of the major departures from regular JS: setting up your view.&lt;/p&gt;

&lt;p&gt;In React for the web, you must create a render method on each of your components that defines your view.  If you're writing your code in JSX (and you should be) your render code will have a striking resemblance to html and you can simply hook that into the DOM wherever you want it by calling React.render on whichever component you'd like to load, specifying which element to append it to.  In React Native however, there is no DOM, let alone html.  Therefore, all of your view is created within the render method of your components and instead of appending those components to an html element, you simply call AppRegistry.registerComponent('idOfComponent', () =&gt; yourComponent).  The main difference lies in what is written within the render method of said component.&lt;/p&gt;

&lt;p&gt;Instead of writing your JSX code as if it were html, you have to use the specific iOS view elements to layout your view.  Even though React Native is in its infancy, there are a lot of great view components available to use that will give your app the look and feel of a native application.  &lt;code&gt;&amp;lt;Text /&amp;gt; &amp;lt;View /&amp;gt; &amp;lt;InputText /&amp;gt; and &amp;lt;SliderIOS /&amp;gt;&lt;/code&gt; are just a few examples of the elements used instead of traditional html like &lt;code&gt;&amp;lt;p&amp;gt; &amp;lt;div&amp;gt; &amp;lt;input&amp;gt;&lt;/code&gt; etc.  The React Native docs can be found &lt;a href="https://facebook.github.io/react-native/docs/view.html#content"&gt;here&lt;/a&gt; and have a full list of built-in components.  You can simply write these in the layout you prefer and it's just like having the html elements on your page but they'll be resting happily in a native iOS environment.&lt;/p&gt;</description><link>http://localhost:2368/creating-a-view-in-react-native/</link><guid isPermaLink="false">ae2fcdc6-a988-4a5a-b638-78f33dbba4a1</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Tue, 05 May 2015 17:38:36 GMT</pubDate></item><item><title>Multiple Views with Angular</title><description>&lt;p&gt;Angular is a...powerful tool that allows Javascript and HTML to be seamlessly connected giving the developer a wide array of robust options regarding what is displayed on a web page.  Especially conducive to single page applications, Angular is hugely popular and, honestly, a little strange.  &lt;/p&gt;

&lt;p&gt;Taking on our Legacy Project here at MakerSquare, I volunteered to focus on the front-end of the full-stack application we're improving upon.  I had worked almost exclusively on the back-end of our previous project, Road Trip Advisor, due to the fact that we had a short deadline and wanted to show something impressive so each of us decided to work on the pieces we were strong in.  My Angular skills are somewhat lacking so I knew I needed to brush up on them and the Legacy project would be the perfect time.  I would be forced to read another group's code, decipher what was happening, and then be required to understand it enough to add features to it.  &lt;/p&gt;

&lt;p&gt;The application, called Tokki, was built in a way that it was essentially a single page application.  On the face however, it didn't feel that way and one of the features we decided to add was the ability to toggle information being displayed on a certain page.  Enter multiple views.  &lt;/p&gt;

&lt;p&gt;During my research I discovered &lt;a href="https://scotch.io/tutorials/angular-routing-using-ui-router"&gt;this site&lt;/a&gt; which led me to success.  The basic idea is &lt;/p&gt;</description><link>http://localhost:2368/multiple-views-with-angular/</link><guid isPermaLink="false">e0490afc-2c8a-4277-b895-a88869360381</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Thu, 23 Apr 2015 15:42:24 GMT</pubDate></item><item><title>The Greenfield Project</title><description>&lt;p&gt;Coding is a practice inherently personal and conducive to being practiced in solitude.  Nearly every programmer starts by writing small applications on their own, following an online tutorial or book and progresses through to larger and larger codebases.  The result (at least in my experience) is a collection of great personal projects that probably work as they're intended but are comprised of convoluted code and interdependent functions. &lt;/p&gt;

&lt;p&gt;I experienced the pitfalls of coding this way when creating my midterm project for a video game programming class I was taking.  After attempting to create a "planet platformer", I had to pivot the idea into something more manageable.  Instead of rewriting everything from scratch I took some of the already written functions and pasted them into a new file which I proceeded to add onto.  I worked away for a week until I had one last day to finish up.  I was nowhere near completing the project and had to make another pivot.  This time though, I had a rather large amount of code written.  No worries, I thought, it's a pretty minor feature change just so I can get some semblance of a finished game turned in.  I quickly discovered just how deep of a hole I had dug myself into by failing to plan and modularize my code.  Scaling down my project by removing a couple features and then adding some functionality to implement the pivot resulted in my having to completely start over.  With one day left to create an entire game.  &lt;/p&gt;

&lt;p&gt;The subsequent hours were spent copy/pasting functions into a new file and being forced to go through my code line by line, deleting interconnected function calls and now-unnecessary arguments, some of which I missed and caused me grief up to the minutes before I turned it in.  &lt;/p&gt;

&lt;p&gt;Fast forward several months and it's time for our first group project here at MakerSquare.  Teams of 4, everyone working to make one seamless final project, and the majority of the time we'll be working remotely from each other.  It was pretty clear that modularity, communication, and extensive planning would be the keys to success.  So that's what we set out to do.  Modularizing our code so it was reusable and easily moveable was a result of planning out exactly what our product was going to do and what the functions were that would achieve our goals.  With the functions defined, we split up the work and made sure it was very clear to each and every one of the team members what each function would receive, where it was called from and what it should return, if anything.  &lt;/p&gt;

&lt;p&gt;As the work began, consistent communication persisted throughout the 11 day project but more importantly, everyone knew exactly how every piece of the application worked thanks to a very long whiteboarding session that extending from the first day to the morning of the second.  There wasn't a single line of code written until halfway through day 2.  Every function was whiteboarded, every piece explained over and over again, and every person given a task.  &lt;/p&gt;

&lt;p&gt;We all finished our projects and presented them Monday night.  The following day, each group had to pick another group's project to improve upon and add features to.  Every single other group chose ours.  &lt;/p&gt;

&lt;p&gt;The Greenfield project was an incredible learning experience with respect to learning how to split up a project into manageable pieces for each individual to work on, prioritizing tasks to ensure each piece is implemented in the correct order, deciding what should be done so as not to block others from working on something, communicating clearly and often, deciding on scope and whether or not our plan is realistic, and too many other things to list.  The bottom line is there's a huge difference between coding a fun personal project at home and trying to make something practical, iterable, and scalable with a team; and the greenfield project has taught me those differences.&lt;/p&gt;</description><link>http://localhost:2368/the-greenfield-project/</link><guid isPermaLink="false">66763f4d-e564-4ad0-b774-1338f9076abe</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 22 Apr 2015 15:59:51 GMT</pubDate></item><item><title>Secure Authorization Techniques</title><description>&lt;p&gt;Before a couple of days ago, when I heard the words salt and hash I would immediately think of a delicious breakfast slam at a diner in the snow with a cup of coffee as the pangs of hunger crept into my reality, jarring me from my daydream only to find myself irritable and slightly upset at whoever haphazardly used those words in casual conversation.  Now though, thanks to MakerSquare, my mind naturally gravitates elsewhere: user authentication.&lt;/p&gt;

&lt;p&gt;So what are the common techniques for user auth and how are they related to a breakfast combo #3 with orange juice? (they're not).  Firstly, passwords need to be stored somewhere for reference so that they can be compared against when a user logs in.  If a company stored these passwords in plain text as they were typed in, anyone could simply look at the database and see which password corresponds with which username and  BAM! Bye bye sensitive personal info.  &lt;/p&gt;

&lt;p&gt;So the first logical step in securely storing passwords is encryption.  This involves taking the password and running it through an encrypting algorithm and therefore storing it as a secret code.  If you entered that code in as the password, it wouldn't work because the computer will compare the password that the user entered with a decrypted version of the password stored on the database.  Sounds great right?  It's definitely loads better than plain text storage but an issue arises in that there is only one key to encrypt and decrypt every password.  If someone, say a disgruntled employee, had a hold of it, they could decrypt every password in the database and double BAM! No one trusts your service anymore.&lt;/p&gt;

&lt;p&gt;Enter hashing.  Hashing is similar to encryption in that it takes a plain text password and runs it through an algorithm which converts it into a jumble of letters and symbols.  The difference is that the algorithm is designed in such a way that the stored jumbles can't be 'dehashed'.  Therefore there's not a key that one could get a hold of to see all the passwords in a database, but there is still some risk.  A hacker who has access to the database and algorithm could use brute force techniques to create what's called a rainbow table: a table of commonly used passwords and what they hash into.  The hacker can take the most common passwords and see if there's a correlation in the database.  BAM again.  &lt;/p&gt;

&lt;p&gt;So finally, there's salt.  Salt is a long string of letters and numbers that is usually randomly generated  and appended to the password before it enters the hashing machine.  The purpose of this is to make the stored jumble of letters and characters too damn long to be feasible to brute force.  Making a rainbow table of a medium size could literally take billions of years to compute!  Now that's some salty hashness.&lt;/p&gt;</description><link>http://localhost:2368/secure-authorization-techniques/</link><guid isPermaLink="false">443d2c7c-bda7-4e81-943f-ad73d37dbef3</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Tue, 07 Apr 2015 16:06:33 GMT</pubDate></item><item><title>Shootout game test</title><description>&lt;p&gt;Attempting to show off my new game on my blog:&lt;/p&gt;</description><link>http://localhost:2368/shootout-game-test/</link><guid isPermaLink="false">8f4cba1c-453f-4696-bdee-c83af544c0e7</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Sat, 28 Mar 2015 05:15:10 GMT</pubDate></item><item><title>The Future of Web Development</title><description>&lt;p&gt;I found a great blog post about what web devs should probably know with the new innovative changes occurring as ECMAScript 2015 rolls out and becomes widely used:  &lt;a href="http://rmurphey.com/blog/2015/03/23/a-baseline-for-front-end-developers-2015/"&gt;A Baseline for Front-End [JS] Developers in 2015&lt;/a&gt;&lt;/p&gt;</description><link>http://localhost:2368/the-future-of-web-development/</link><guid isPermaLink="false">902836f4-2c1a-4b99-ae92-8226613200d0</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Thu, 26 Mar 2015 15:23:39 GMT</pubDate></item><item><title>Event Systems for Modular Code</title><description>&lt;p&gt;Since I began my education of the exciting world of computer programming, I always wrote code in a similar fashion:  Think about the problem as a whole, decide where to start, code, decide what the next step should be, code, and so on.  This linear way of writing programs function by function without much consideration of the big picture has often led to code that, though working, is very difficult to change.  It has worked well enough for me in the past, but this is mostly due to the fact that I've only made relatively small projects and they've all been coded solo.  I can recall a few specific instances when I've wanted to remove a feature or refactor a function and it was never as easy as simply deleting that function.  Instead it would lead me on a path going from function to function, deleting arguments and function calls sometimes all the way back to the initial function call.  &lt;/p&gt;

&lt;h3 id="entereventsystems"&gt;Enter Event Systems&lt;/h3&gt;

&lt;p&gt;This past week at MakerSquare we were introduced to MVC (Model-View-Controller) and using event systems to control flow. The topic was introduced to us specifically in Backbone though the concepts are applicable to any computer application made with nearly any language.  The idea is that each module of your application has a degree of separation from every other piece and therefore can be removed, copied or adjusted easily without affecting other parts of your program.  This is achieved by using triggers and listeners to react to events that occur within your program. &lt;br&gt;
A very naive and possibly contrived example: &lt;br&gt;
Let's say you have a function that takes in user input and stores it in an array.  Your program is then supposed to take that array and sort it before sending it across the internets to cloud land.  In most cases, one might intuitively think to create a function that sorts the array and a function that sends it to cloud land, then simply calling each function in succession from within the previous function.  In this program, if we wanted to remove the sortArray function, our application would break and we would get an error.  MVC solves this with listeners and triggers.  Instead of directly linking each of our functions the flow would occur as follows:  User input is obtained by our first function and then that function fires a trigger.  Triggers simply send a signal to your application saying "Hey everyone! I've been triggered!", now the functions that are listening for that trigger will hear it and do their thing.  So in our example, we will set up listeners on the sort function and the send to cloud function.  This makes our code much more modular because if we want to remove our sort function, our code will still work!  The trigger will fire like it always has and anyone listening will do their thing, in this case it will just be the send to cloud function.  &lt;/p&gt;</description><link>http://localhost:2368/event-systems-for-modular-code/</link><guid isPermaLink="false">9624f880-3a8c-4fd4-ad38-f4f4cfc3aab7</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 15:51:47 GMT</pubDate></item><item><title>How to work with D3.js Transitions</title><description>&lt;p&gt;D3 is a powerful JavaScript library that allows data to be manipulated visually in the browser.  There are some incredible examples of what can be created here.  If you know how to use it, D3 can liberate your application's appearance and give your users an incredible and engaging way to interact with your product.  There are numerous tutorials online for getting started so I'm just going to delve into one particular aspect that left me scratching my head for some time until, after enough research and understanding, I was able to realize what was happening under the hood of this fantastic library.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;Transitions&lt;/h2&gt;  

&lt;p&gt;The built-in transition methods in D3 are what allow the library to be really engaging and make your applications look and feel professional without much code.  An example would be if you wanted to move a &amp;lt;div&amp;gt; with a location at { top : 0px } to a new location at { top : 20px }.  To smoothly animate the &amp;lt;div&amp;gt; down the screen with D3, you would simply type:  &lt;/p&gt;

&lt;blockquote&gt;d3.select('body').selectAll('div').transition().style('top', '20px');&lt;/blockquote&gt;  

&lt;p&gt;Easy enough, but that transition takes time.  And what if we needed to check up on it while it's transitioning?  For instance, if we were making a game and that div is a bomb that explodes as soon as it touches the player.  We would need to get inside that transition and run our "collisionCheck" function at every step.  Well D3 allows us to do just that.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;Tweening&lt;/h2&gt;  

&lt;p&gt;Tweens are the steps or animations in-between the start and end of an action.  In our example above, the start is { top : 0px } and the end is { top : 20px } so any point in which our div is shown on the screen between 1px and 19px is a tween.  (Note: D3 will refresh the screen 60 times per second so the animation doesn't just move in 1px increments).  Now let's talk about how we can run our collision detection function at each step along the transition.  It turns out that D3 has a .tween() method which allows us to run a custom function at each frame.  To use it, we would write:&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;d3.select('body')

&amp;nbsp;&amp;nbsp;.selectAll('div')

&amp;nbsp;&amp;nbsp;.transition()

&amp;nbsp;&amp;nbsp;.style('top', '20px')

&amp;nbsp;&amp;nbsp;.tween(function(time){

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;var current_Y_Position = d3.select('body').selectAll('div').style('top');
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;collisionDetectionFunction(yPosition);

});&lt;/blockquote&gt;

&lt;p&gt;And that's it!  The tween method allows us to call our custom function, in this case collisionDetectionFunction(). But we need to get the current 'top' value in order to check that against our player to see if they've collided, so we run a D3 selector to get our current Y position.  There's an interesting point here about how D3 acts on objects in transitions.  Each time the screen refreshes, the top value needs to be at some point in between start and end and D3's magic does the math to figure out what that top value actually needs to be at any specific frame.  If we paused the application halfway through the transition and looked at its css top value, it would be 10px.  Our css file would show { top : 10px }.  That allows us to run our D3 selector in the .tween() method and pull whatever the css value is on that frame.  Thanks D3!  There's one more aspect, let's talk about the time parameter that gets passed into our function.  time is a number between 0 and 1 where 0 is the starting frame and 1 is the ending frame of the transition so we are essentially passed how far along the transition we are as a percentage.  To clarify, exactly halfway through our example, we would have top : 10px and time = 0.5 (or 50%).&lt;/p&gt;</description><link>http://localhost:2368/how-to-work-with-d3-js-transitions/</link><guid isPermaLink="false">97c1110c-c2a7-4e6b-865b-9b60d862d7b5</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 02:18:12 GMT</pubDate></item><item><title>One Week of Learnin'</title><description>&lt;p&gt;Everything I've learned in the past 9 days:  &lt;/p&gt;

&lt;ul&gt;  
    &lt;li&gt;Object-Oriented Fundamentals&lt;/li&gt;
    &lt;li&gt;Recursion&lt;/li&gt;
    &lt;li&gt;Underscore.js&lt;/li&gt;
    &lt;li&gt;Scope&lt;/li&gt;
    &lt;li&gt;Closures&lt;/li&gt;
    &lt;li&gt;The Call Stack&lt;/li&gt;
    &lt;li&gt;Using Terminal with Git&lt;/li&gt;
    &lt;li&gt;jQuery&lt;/li&gt;
    &lt;li&gt;Stringify&lt;/li&gt;
    &lt;li&gt;Data Structures
&lt;ul&gt;  
    &lt;li&gt;Linked Lists, Trees, Graphs, Hash Tables, Binary Search Trees&lt;/li&gt;
&lt;/ul&gt;  

&lt;p&gt;&lt;/p&gt;&lt;/li&gt; &lt;br&gt;
    &lt;li&gt;Test Driven Development Practices&lt;/li&gt;
    &lt;li&gt;Object Constructors&lt;/li&gt;
    &lt;li&gt;Prototypal Inheritance&lt;/li&gt;
    &lt;li&gt;Inheritance Patterns&lt;/li&gt;
    &lt;li&gt;Binding "this" to the correct context&lt;/li&gt;
    &lt;li&gt;jQuery Event Delegation&lt;/li&gt;
    &lt;li&gt;and even more that I can't recall at the time...&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;</description><link>http://localhost:2368/one-week-of-learnin/</link><guid isPermaLink="false">5636f9d0-2ce5-4243-b2dd-c6b4488fea7b</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 02:17:47 GMT</pubDate></item><item><title>jQuery Event Handler Delegation</title><description>&lt;p&gt;Today at MakerSquare we're building a dance floor application that allows the user to click a button to add dancers to a dance floor space. The app lives in the browser and the dancers are html elements that are dynamically added to the DOM at a random position. The problem I and Trace, my project partner, experienced was one I had seen before and, after a stackOverflow search, it seems that many others before us have experienced as well. The problem was as follows: We needed to be able to interact with our dancers using the mouse, and when we did, make the dancers perform an action. Because we were manipulating the appearance of html elements, we had to use jQuery to perform said action.&lt;/p&gt;

&lt;p&gt;So we set up an event listener to fire our function whenever we clicked on one of the dancers. But nothing happened. Our function wasn't firing and in fact, jQuery wasn't recognizing that any dancers were even on screen. So what's up jQuery? Are you blind or something? Silly jQuery... The fact is, when you create an event listener, jQuery takes a snapshot of the DOM at the moment of creation and if anything is added after that, it doesn't know it's there.&lt;/p&gt;

&lt;p&gt;You can work with this limitation however by pointing jQuery to your dynamically created object through an element that did exist when the event listener was created, such as the body of the html document or anything that is in the html file itself. This process is called event delegation. Let's look at some code shall we?&lt;/p&gt;

&lt;blockquote&gt;  
$('.colorDancer').on('click', function(event) {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$(this).toggleClass('colorDancer');
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$(this).toggleClass('colorDancerClicked');
    });
&lt;/blockquote&gt;

&lt;p&gt;This block is a jQuery event handler.  We're telling jQuery to look for any element with the class "colorDancer" and when it's clicked, remove the class "colorDancer" and the "colorDancerClicked" class.  In this example, the webpage is loaded with without any elements that have the "colorDancer" class but they can be added by the user after the page has loaded.  Because the "colorDancer" elements are created dynamically, jQuery will not be able to recognize them and the code will do nothing.  In comes event delegation:&lt;/p&gt;

&lt;blockquote&gt;  
$(&lt;strong&gt;'body'&lt;/strong&gt;).on('click', &lt;strong&gt;'.colorDancer'&lt;/strong&gt;, function(event) {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$(this).toggleClass('colorDancer');
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$(this).toggleClass('colorDancerClicked');
    });
&lt;/blockquote&gt;

&lt;p&gt;In order for jQuery to see our new dancers, we have to point to them through an element that existed when the event listener was created.  In this case we're using  because every page has a body and it must be in the html file therefore it is something that we know existed from the instant the page loaded.  By adding our specific target as the second argument in the .on() function, we are telling jQuery to first find body, then within body look for anything that has a "colorDancer" class.  jQuery thus finds it and toggles our classes.  Voila.&lt;/p&gt;</description><link>http://localhost:2368/jquery-event-handler-delegation/</link><guid isPermaLink="false">ff557ce1-04fb-48eb-a665-265d2f6a0017</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 02:17:21 GMT</pubDate></item><item><title>Hoisting in Javascript</title><description>&lt;p&gt;What will the following code output?  &lt;/p&gt;

&lt;blockquote&gt;&lt;strong&gt;var&lt;/strong&gt; someFunc = &lt;strong&gt;function&lt;/strong&gt;() {

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alert("Outside of container function");

}
&lt;br&gt;  
&lt;br&gt;  
&lt;strong&gt;var&lt;/strong&gt; container = &lt;strong&gt;function&lt;/strong&gt;() {

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;someFunc();

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;var&lt;/strong&gt; someFunc = &lt;strong&gt;function&lt;/strong&gt;() {

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alert("Inside of container function");

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}

}

container();&lt;/blockquote&gt;  

&lt;p&gt;Did you guess "Inside of container function"?  I did too.  Though, to my surprise, I was wrong.  I was wrong because of hoisting.  Hoisting is a simple concept to grasp but being ignorant of its effects can make JS give you some seemingly mysterious errors and bugs.  So here's what's happening:&lt;/p&gt;

&lt;p&gt;When your code runs, the interpreter goes through each line and looks for any variable declarations so it can assign them a block of memory.  It finds all variable declarations before executing any code and assigns the memory space before assigning those variables their values.  Even if those variables were assigned a value on the same line they were declared (they were initialized).  So we can simply imagine every variable declaration in your program is moved to the top of the code - the variables are hoisted.  Let's rewrite the above code as if it were already hoisted:  &lt;/p&gt;

&lt;blockquote&gt;&lt;strong&gt;var&lt;/strong&gt; someFunc;    //variable declaration gets hoisted to here  
&lt;strong&gt;var&lt;/strong&gt; container;    //variable declaration gets hoisted to here


&lt;del datetime="2015-03-07T16:21:32+00:00"&gt;var&lt;/del&gt; someFunc = &lt;strong&gt;function&lt;/strong&gt;() {

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alert("Outside of container function");

}


&lt;del datetime="2015-03-07T16:21:32+00:00"&gt;var&lt;/del&gt; container = &lt;strong&gt;function&lt;/strong&gt;() {  
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;var&lt;/strong&gt; someFunc;   //variable declaration gets hoisted to here
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;someFunc();

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;del datetime="2015-03-07T16:21:32+00:00"&gt;var&lt;/del&gt; someFunc = &lt;strong&gt;function&lt;/strong&gt;() {

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;alert("Inside of container function");

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}

}

container();&lt;/blockquote&gt;  

&lt;p&gt;Now it's clear to see why someFunc is undefined when we call container();  One more important factor I should point out is that each variable declaration gets hoisted to the top of its scope, which we see happening inside of container().  And that's hoisting!&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><link>http://localhost:2368/hoisting-in-javascript/</link><guid isPermaLink="false">e65b28e7-c03a-40b1-974c-f301137b9153</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 02:16:49 GMT</pubDate></item><item><title>What's this recursion business?   Why not just use a loop?</title><description>&lt;p&gt;Recursion can be a mind bender when you're first introduced to it; a function calling itself over and over again until reaching an end case...why not just use an easy-to-understand, built-in while loop or for loop?  After all, loops are just recursive functions with an easier syntax right?  Here at MakerSquare we were asked to consider occasions when a recursive function might be more beneficial than simply using a loop.  And to be honest, I couldn't really think of one. &lt;/p&gt;

&lt;p&gt;Fortunately though, I'm lucky enough to be surrounded with extremely smart and all-around incredible people every day in class, and yesterday one such individual told me why recursion matters:  &lt;/p&gt;

&lt;p&gt;If you have a function that you need to call over and over again and that function does something that might take some time, such as retrieving data from a server, data which is used in the next call of the function, you would need recursion because you have to make sure the function completes its data retrieval before moving on to the next iteration.  If you used a simple loop in this case, it might process so quickly on your user's machine that it would be trying to run through the next iteration of the loop before the data that it needs has been retrieved, resulting in an error.  This is also called a callback function.  &lt;/p&gt;

&lt;p&gt;Boom! Clarity.  His one simple casual explanation about recursion and callback functions allowed me to see the light.  Thanks Ben!&lt;/p&gt;</description><link>http://localhost:2368/whats-this-recursion-business-why-not-just-use-a-loop/</link><guid isPermaLink="false">1d190795-a21a-4196-9d1a-ee466b49010c</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 02:16:03 GMT</pubDate></item><item><title>Closures in Javascript</title><description>&lt;p&gt;Closures can be a tricky bit of javascript.  Let's say you have a function that you want to call many times, and within that function is a variable that gets declared and stores a piece of data that is updated each time the function is called.  Intuitively, one would think the variable, which is declared within the function, would be recreated when the function is called and deleted when the function terminates.  But this is coding, and it ain't always intuitive.&lt;/p&gt;

&lt;p&gt;In reality, a javascript function (and everything within it) stays alive in memory until nothing else in the program points to that function.  This deep function that is saved in memory is called a closure, and closures can be your friend.  We were shown a great example of this in class by way of a function called "once".  "Once" is actually a method in UnderscoreJS that can be really useful for optimizing your code.  Essentially, if you have a  function that takes a lot of processing power that needs to be called over and over again, it can be really taxing on your users' systems and cause a frustrating slowdown.  "Once" fixes this by taking a function (your heavily taxing function) as an argument and saving its resulting value in memory so when that same function is called again, the stored result is simply returned and the function isn't run a second (or third, or fourth) time.&lt;/p&gt;

&lt;p&gt;Let's take a look at the code:  &lt;/p&gt;

&lt;blockquote&gt;  
&lt;p style="text-align:left;"&gt; _.once = function(passedFunction) {&lt;br&gt;  
&lt;/p&gt;&lt;p style="text-align:left;"&gt;    var alreadyCalled = false;     //we set a boolean here that initializes to false which&lt;br&gt;  
&lt;/p&gt;&lt;p style="text-align:left;"&gt;                                                //will tell the function if the passedFunction has been called&lt;br&gt;  
&lt;/p&gt;&lt;p style="text-align:left;"&gt;    var result;   //this variable will store the resulting value of running the function&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;    return function() {  //because we are creating a function within a function, a closure scope is created&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;        if (!alreadyCalled) {  //check if the function has been run before&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;        result = func.apply(this, arguments);  //run the function and set its value to result&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;        alreadyCalled = true;  //set alreadyCalled to true so the function is not run next time it's called&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;    }&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;    return result;  //return the value of the function&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;     };&lt;/p&gt;  
&lt;p style="text-align:left;"&gt;};&lt;/p&gt;  
&lt;/blockquote&gt;  

&lt;p style="text-align:left;"&gt;Creating a closure scope is as simple as constructing a function within a function.  Because the variables alreadyCalled and result are declared in the outer function, they are saved in memory as long as one part of the code is still pointing to it.  Therefore, when we call _.once a second time, alreadyCalled and result will retain their values from when they were called the first time even though we are calling the function again.  The reason behind this somewhat mysterious characteristic of Javascript has to do with the way JS allocates its memory when it encounters functions within functions.  As a result, we the coders reap the benefits of values being saved after the functions they're declared within terminate.  This is just one (simple) explanation of a javascript closure.&lt;/p&gt;  

&lt;p&gt;&amp;nbsp;&lt;/p&gt;</description><link>http://localhost:2368/closures-in-javascript/</link><guid isPermaLink="false">f25fa789-5192-4dbb-98c9-ee3da16782ad</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Wed, 25 Mar 2015 02:15:14 GMT</pubDate></item><item><title>Learning JavaScript</title><description>&lt;p&gt;As I begin my foray into formal Javascript education here at MakerSquare in San Francisco, I'll be sharing my experiences and things I learn along the way.  Writing out explanations of newly gained knowledge is a great way to clarify new ideas and hopefully simplify them in my own mind by trying to simplify them onto a blog post.  I hope this blog helps anyone reading it as much as it will help me.  May your (and my) coding be happy!&lt;/p&gt;</description><link>http://localhost:2368/learning-javascript/</link><guid isPermaLink="false">5a821c28-5d78-4833-adf7-470fda292689</guid><dc:creator>Travis Neufeld</dc:creator><pubDate>Tue, 24 Mar 2015 15:12:55 GMT</pubDate></item></channel></rss>